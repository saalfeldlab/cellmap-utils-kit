[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "cellmap-utils-kit"
description = "Collection of various utilities for cellmap data including data preparation scripts, functions to extract info from attributes etc"
dependencies = [
    "h5py",
    "GitPython",
    "zarr",
    "numpy",
    "jupyter",
    "scikit-image",
    "fibsem-tools",
    "dask",
    "xarray-datatree",
    "xarray",
    "pydantic-ome-ngff",
    "xarray-ome-ngff"

]
dynamic = ["version"]
readme = "README.md"
requires-python = ">=3.8"
license = { text = "MIT" }
keywords = []
authors = [{ name = "Larissa Heinrich", email = "heinrichl@janelia.hhmi.org" }]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

[project.urls]
homepage = "https://github.com/saalfeldlab/cellmap-utils-kit"
repository = "https://github.com/saalfeldlab/cellmap-utils-kit"

[project.scripts]
data-prep = "cellmap_utils_kit.cli:cli"

[tool.hatch.version]
source = "vcs"

[tool.hatch.metadata]
source-layout = "src"

[tool.hatch.build.targets.wheel]
only-include = ["src"]
sources = ["src"]

[tool.hatch.envs.default]
dependencies = []
type = "conda"
command = "mamba"
conda-forge = true

[tool.hatch.envs.dev]
dependencies = [
    "black",
    "ipython",
    "mypy",
    "pdbpp",
    "pre-commit",
    "pytest-cov",
    "pytest",
    "rich",
    "ruff",
]

# https://github.com/charliermarsh/ruff
[tool.ruff]
line-length = 88
target-version = "py38"
src = ["src"]
# https://beta.ruff.rs/docs/rules/
lint.select = [
    "A",
    "A001", # flake8-builtins
    "ARG",
    "B",    # flake8-bugbear
    "C",
    "C4",   # flake8-comprehensions
    "D",    # pydocstyle
    "DTZ",
    "E",    # style errors
    "EM",
    "F",    # flakes
    "FBT",
    "I",    # isort
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",  # ruff-specific rules
    "S",
    "T",
    "TID",
    "UP",   # pyupgrade
    "W",    # style warnings
    "YTT",
]
lint.ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Ignore complexity
    "C901",
    "D205",
    # Allow multi-line summary to start with a captial letter
    "D212",
    # Allow multi-line summary
    "D213",
    # Allow non-imperative summaries
    "D401",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105",
    "S106",
    "S107",

    "PLR0911",
    "PLR0912",
    "PLR0913",
    "PLR0915",
]
lint.unfixable = [
    # Don't touch unused imports
    "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["cellmap-utils-kit"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252", "D103", "D100"]

# https://docs.pytest.org/en/6.2.x/customize.html
[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]
filterwarnings = ["error"]

# https://mypy.readthedocs.io/en/stable/config_file.html
[tool.mypy]
files = "src/**/"
strict = true
disallow_any_generics = false
disallow_subclassing_any = false
show_error_codes = true
pretty = true

# # module specific overrides
# [[tool.mypy.overrides]]
# module = ["numpy.*",]
# ignore_errors = true


# https://coverage.readthedocs.io/en/6.4/config.html
[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "@overload",
    "except ImportError",
    "\\.\\.\\.",
    "raise NotImplementedError()",
]
[tool.coverage.run]
source = ["cellmap_utils_kit"]

# https://github.com/mgedmin/check-manifest#configuration
[tool.check-manifest]
ignore = [
    ".github_changelog_generator",
    ".pre-commit-config.yaml",
    ".ruff_cache/**/*",
    "tests/**/*",
]
